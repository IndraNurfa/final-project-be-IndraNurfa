// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------
// ENUMS
// ----------------------
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum CreatedByType {
  ADMIN
  USER
}

// ----------------------
// MODELS
// ----------------------
model Role {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar
  slug       String   @db.VarChar(100)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  users User[]

  @@map("roles")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @db.VarChar(100)
  full_name  String   @db.VarChar(100)
  role_id    Int
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role     Role          @relation(fields: [role_id], references: [id])
  sessions UserSession[]
  bookings Booking[]

  @@unique([email])
  @@map("users")
}

model UserSession {
  id                    Int       @id @default(autoincrement())
  user_id               Int
  jti                   String    @unique @db.Uuid
  token                 String
  refresh_token         String
  token_expired         DateTime
  refresh_token_expired DateTime
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  revoked_at            DateTime?

  user User @relation(fields: [user_id], references: [id])

  @@unique([token, refresh_token])
  @@map("user_sessions")
}

model MasterCourtTypes {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  price      Decimal  @db.Decimal(8, 2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  master_courts MasterCourts[]

  @@map("master_court_types")
}

model MasterCourts {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100)
  slug          String   @db.VarChar(100)
  court_type_id Int
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  master_court_types MasterCourtTypes @relation(fields: [court_type_id], references: [id])
  bookings           Booking[]

  @@map("master_courts")
}

model Booking {
  id              Int           @id @default(autoincrement())
  uuid            String        @default(uuid()) @db.Uuid
  created_by_type CreatedByType
  user_id         Int
  court_id        Int
  status          BookingStatus @default(PENDING)
  booking_date    DateTime      @db.Date
  start_time      DateTime
  end_time        DateTime
  cancel_reason   String?       @db.VarChar
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  user      User             @relation(fields: [user_id], references: [id])
  court     MasterCourts     @relation(fields: [court_id], references: [id])
  details   BookingDetail?
  histories BookingHistory[]

  @@unique([uuid])
  @@index([uuid, booking_date, user_id])
  @@map("bookings")
}

model BookingDetail {
  id          Int      @id @default(autoincrement())
  booking_id  Int      @unique
  name        String?  @db.VarChar(100)
  total_price Decimal  @db.Decimal(10, 2)
  total_hour  Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  booking Booking @relation(fields: [booking_id], references: [id])

  @@map("booking_details")
}

model BookingHistory {
  id         Int           @id @default(autoincrement())
  booking_id Int
  status     BookingStatus
  created_at DateTime      @default(now())
  created_by String?       @db.VarChar

  booking Booking @relation(fields: [booking_id], references: [id])

  @@map("booking_histories")
}
